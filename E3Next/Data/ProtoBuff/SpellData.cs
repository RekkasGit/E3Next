// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpellData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from SpellData.proto</summary>
public static partial class SpellDataReflection {

  #region Descriptor
  /// <summary>File descriptor for SpellData.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SpellDataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9TcGVsbERhdGEucHJvdG8iKQoNU3BlbGxEYXRhTGlzdBIYCgRkYXRhGAEg",
          "AygLMgouU3BlbGxEYXRhIo8PCglTcGVsbERhdGESEQoJU3BlbGxOYW1lGAEg",
          "ASgJEhAKCENhc3ROYW1lGAIgASgJEhMKC1N1YmNhdGVnb3J5GAMgASgJEhAK",
          "CENhdGVnb3J5GAQgASgJEigKCENhc3RUeXBlGAUgASgOMhYuU3BlbGxEYXRh",
          "LkNhc3RpbmdUeXBlEhIKClRhcmdldFR5cGUYBiABKAkSEAoIU3BlbGxHZW0Y",
          "ByABKAUSEwoLR2l2ZVVwVGltZXIYCCABKAUSEAoITWF4VHJpZXMYCSABKAUS",
          "EAoIRHVyYXRpb24YCiABKAUSHAoURHVyYXRpb25Ub3RhbFNlY29uZHMYCyAB",
          "KAUSEgoKUmVjYXN0VGltZRgMIAEoBRIUCgxSZWNvdmVyeVRpbWUYDSABKAES",
          "EgoKbXlDYXN0VGltZRgOIAEoARIbChNNeUNhc3RUaW1lSW5TZWNvbmRzGA8g",
          "ASgBEg8KB015UmFuZ2UYECABKAESDAoETWFuYRgRIAEoBRIPCgdNaW5NYW5h",
          "GBIgASgFEg8KB01heE1hbmEYEyABKAUSDQoFTWluSFAYFCABKAUSDwoHSGVh",
          "bFBjdBgVIAEoBRINCgVEZWJ1ZxgWIAEoCBIPCgdSZWFnZW50GBcgASgJEhUK",
          "DUl0ZW1NdXN0RXF1aXAYGCABKAgSDgoGTm9CdXJuGBkgASgIEhAKCE5vVGFy",
          "Z2V0GBogASgIEg8KB05vQWdncm8YGyABKAgSDAoETW9kZRgcIAEoBRIVCg1F",
          "bmR1cmFuY2VDb3N0GB0gASgFEg0KBURlbGF5GB4gASgFEh8KF0FmdGVyQ2Fz",
          "dENvbXBsZXRlZERlbGF5GB8gASgFEg4KBkNhc3RJRBggIAEoBRIOCgZNaW5F",
          "bmQYISABKAUSEQoJQ2FzdEludmlzGCIgASgIEhEKCVNwZWxsVHlwZRgjIAEo",
          "CRISCgpDYXN0VGFyZ2V0GCQgASgJEhsKE1N0YWNrUmVxdWVzdFRhcmdldHMY",
          "JSADKAkSGgoSU3RhY2tJbnRlcnZhbENoZWNrGCYgASgDEh4KFlN0YWNrSW50",
          "ZXJ2YWxOZXh0Q2hlY2sYJyABKAMSGAoQU3RhY2tSZWNhc3REZWxheRgoIAEo",
          "AxIYChBTdGFja1JlcXVlc3RJdGVtGCkgASgJEhIKCkdpZnRPZk1hbmEYKiAB",
          "KAgSDwoHU3BlbGxJRBgrIAEoBRIQCghQY3RBZ2dybxgsIAEoBRIMCgRab25l",
          "GC0gASgJEg8KB01pblNpY2sYLiABKAUSFgoOQWxsb3dTcGVsbFN3YXAYLyAB",
          "KAgSFQoNTm9FYXJseVJlY2FzdBgwIAEoCBIPCgdOb1N0YWNrGDEgASgIEhQK",
          "DFRyaWdnZXJTcGVsbBgyIAEoCRITCgtCZWZvcmVTcGVsbBgzIAEoCRITCgtO",
          "b0ludGVycnVwdBg1IAEoCBISCgpBZnRlckV2ZW50GDYgASgJEhMKC0JlZm9y",
          "ZUV2ZW50GDcgASgJEg4KBkNhc3RJRhg4IAEoCRILCgNJZnMYOSABKAkSEAoI",
          "SW5pdE5hbWUYOiABKAkSGQoRUmVhZ2VudE91dE9mU3RvY2sYOyABKAgSEwoL",
          "U3BlbGxJbkJvb2sYPCABKAgSEQoJU3BlbGxJY29uGD0gASgFEhUKDU5vTWlk",
          "U29uZ0Nhc3QYPiABKAgSHwoXTWluRHVyYXRpb25CZWZvcmVSZWNhc3QYPyAB",
          "KAMSEwoLSXNTaG9ydEJ1ZmYYQCABKAgSEQoJSGVhbHRoTWF4GEEgASgFEhgK",
          "EElnbm9yZVN0YWNrUnVsZXMYQiABKAgSEAoISXNEZWJ1ZmYYQyABKAgSDQoF",
          "SXNEb1QYRCABKAgSDgoGUm90YXRlGEUgASgIEhIKCkFmdGVyU3BlbGwYRiAB",
          "KAkSDQoFTGV2ZWwYRyABKAUSEwoLRGVzY3JpcHRpb24YSCABKAkSEgoKUmVz",
          "aXN0VHlwZRhJIAEoCRIRCglSZXNpc3RBZGoYSiABKAUSMAoQQ2FzdFR5cGVP",
          "dmVycmlkZRhLIAEoDjIWLlNwZWxsRGF0YS5DYXN0aW5nVHlwZRIaChJDaGVj",
          "a0ZvckNvbGxlY3Rpb24YTCADKAkSDwoHSWZzS2V5cxhNIAEoCRIPCgdFbmFi",
          "bGVkGE4gASgIEg4KBklzQnVmZhhPIAEoCBISCgpNaW5IUFRvdGFsGFAgASgF",
          "EhYKDkFmdGVyRXZlbnRLZXlzGFEgASgJEhcKD0JlZm9yZUV2ZW50S2V5cxhS",
          "IAEoCRIMCgRBQUlEGFMgASgFEhQKDFNwZWxsRWZmZWN0cxhUIAMoCRIXCg9B",
          "ZnRlckV2ZW50RGVsYXkYVSABKAUSGAoQQmVmb3JlRXZlbnREZWxheRhWIAEo",
          "BRIXCg9BZnRlclNwZWxsRGVsYXkYVyABKAUSGAoQQmVmb3JlU3BlbGxEZWxh",
          "eRhYIAEoBRIWCg5BZnRlckNhc3REZWxheRhZIAEoBSJLCgtDYXN0aW5nVHlw",
          "ZRIGCgJBQRAAEgkKBVNwZWxsEAESCAoERGlzYxACEgsKB0FiaWxpdHkQAxII",
          "CgRJdGVtEAQSCAoETm9uZRAFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SpellDataList), global::SpellDataList.Parser, new[]{ "Data" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SpellData), global::SpellData.Parser, new[]{ "SpellName", "CastName", "Subcategory", "Category", "CastType", "TargetType", "SpellGem", "GiveUpTimer", "MaxTries", "Duration", "DurationTotalSeconds", "RecastTime", "RecoveryTime", "MyCastTime", "MyCastTimeInSeconds", "MyRange", "Mana", "MinMana", "MaxMana", "MinHP", "HealPct", "Debug", "Reagent", "ItemMustEquip", "NoBurn", "NoTarget", "NoAggro", "Mode", "EnduranceCost", "Delay", "AfterCastCompletedDelay", "CastID", "MinEnd", "CastInvis", "SpellType", "CastTarget", "StackRequestTargets", "StackIntervalCheck", "StackIntervalNextCheck", "StackRecastDelay", "StackRequestItem", "GiftOfMana", "SpellID", "PctAggro", "Zone", "MinSick", "AllowSpellSwap", "NoEarlyRecast", "NoStack", "TriggerSpell", "BeforeSpell", "NoInterrupt", "AfterEvent", "BeforeEvent", "CastIF", "Ifs", "InitName", "ReagentOutOfStock", "SpellInBook", "SpellIcon", "NoMidSongCast", "MinDurationBeforeRecast", "IsShortBuff", "HealthMax", "IgnoreStackRules", "IsDebuff", "IsDoT", "Rotate", "AfterSpell", "Level", "Description", "ResistType", "ResistAdj", "CastTypeOverride", "CheckForCollection", "IfsKeys", "Enabled", "IsBuff", "MinHPTotal", "AfterEventKeys", "BeforeEventKeys", "AAID", "SpellEffects", "AfterEventDelay", "BeforeEventDelay", "AfterSpellDelay", "BeforeSpellDelay", "AfterCastDelay" }, null, new[]{ typeof(global::SpellData.Types.CastingType) }, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class SpellDataList : pb::IMessage<SpellDataList>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SpellDataList> _parser = new pb::MessageParser<SpellDataList>(() => new SpellDataList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SpellDataList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpellDataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellDataList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellDataList(SpellDataList other) : this() {
    data_ = other.data_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellDataList Clone() {
    return new SpellDataList(this);
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SpellData> _repeated_data_codec
      = pb::FieldCodec.ForMessage(10, global::SpellData.Parser);
  private readonly pbc::RepeatedField<global::SpellData> data_ = new pbc::RepeatedField<global::SpellData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::SpellData> Data {
    get { return data_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SpellDataList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SpellDataList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!data_.Equals(other.data_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= data_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    data_.WriteTo(output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    data_.WriteTo(ref output, _repeated_data_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += data_.CalculateSize(_repeated_data_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SpellDataList other) {
    if (other == null) {
      return;
    }
    data_.Add(other.data_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          data_.AddEntriesFrom(input, _repeated_data_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          data_.AddEntriesFrom(ref input, _repeated_data_codec);
          break;
        }
      }
    }
  }
  #endif

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class SpellData : pb::IMessage<SpellData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<SpellData> _parser = new pb::MessageParser<SpellData>(() => new SpellData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<SpellData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SpellDataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellData(SpellData other) : this() {
    spellName_ = other.spellName_;
    castName_ = other.castName_;
    subcategory_ = other.subcategory_;
    category_ = other.category_;
    castType_ = other.castType_;
    targetType_ = other.targetType_;
    spellGem_ = other.spellGem_;
    giveUpTimer_ = other.giveUpTimer_;
    maxTries_ = other.maxTries_;
    duration_ = other.duration_;
    durationTotalSeconds_ = other.durationTotalSeconds_;
    recastTime_ = other.recastTime_;
    recoveryTime_ = other.recoveryTime_;
    myCastTime_ = other.myCastTime_;
    myCastTimeInSeconds_ = other.myCastTimeInSeconds_;
    myRange_ = other.myRange_;
    mana_ = other.mana_;
    minMana_ = other.minMana_;
    maxMana_ = other.maxMana_;
    minHP_ = other.minHP_;
    healPct_ = other.healPct_;
    debug_ = other.debug_;
    reagent_ = other.reagent_;
    itemMustEquip_ = other.itemMustEquip_;
    noBurn_ = other.noBurn_;
    noTarget_ = other.noTarget_;
    noAggro_ = other.noAggro_;
    mode_ = other.mode_;
    enduranceCost_ = other.enduranceCost_;
    delay_ = other.delay_;
    afterCastCompletedDelay_ = other.afterCastCompletedDelay_;
    castID_ = other.castID_;
    minEnd_ = other.minEnd_;
    castInvis_ = other.castInvis_;
    spellType_ = other.spellType_;
    castTarget_ = other.castTarget_;
    stackRequestTargets_ = other.stackRequestTargets_.Clone();
    stackIntervalCheck_ = other.stackIntervalCheck_;
    stackIntervalNextCheck_ = other.stackIntervalNextCheck_;
    stackRecastDelay_ = other.stackRecastDelay_;
    stackRequestItem_ = other.stackRequestItem_;
    giftOfMana_ = other.giftOfMana_;
    spellID_ = other.spellID_;
    pctAggro_ = other.pctAggro_;
    zone_ = other.zone_;
    minSick_ = other.minSick_;
    allowSpellSwap_ = other.allowSpellSwap_;
    noEarlyRecast_ = other.noEarlyRecast_;
    noStack_ = other.noStack_;
    triggerSpell_ = other.triggerSpell_;
    beforeSpell_ = other.beforeSpell_;
    noInterrupt_ = other.noInterrupt_;
    afterEvent_ = other.afterEvent_;
    beforeEvent_ = other.beforeEvent_;
    castIF_ = other.castIF_;
    ifs_ = other.ifs_;
    initName_ = other.initName_;
    reagentOutOfStock_ = other.reagentOutOfStock_;
    spellInBook_ = other.spellInBook_;
    spellIcon_ = other.spellIcon_;
    noMidSongCast_ = other.noMidSongCast_;
    minDurationBeforeRecast_ = other.minDurationBeforeRecast_;
    isShortBuff_ = other.isShortBuff_;
    healthMax_ = other.healthMax_;
    ignoreStackRules_ = other.ignoreStackRules_;
    isDebuff_ = other.isDebuff_;
    isDoT_ = other.isDoT_;
    rotate_ = other.rotate_;
    afterSpell_ = other.afterSpell_;
    level_ = other.level_;
    description_ = other.description_;
    resistType_ = other.resistType_;
    resistAdj_ = other.resistAdj_;
    castTypeOverride_ = other.castTypeOverride_;
    checkForCollection_ = other.checkForCollection_.Clone();
    ifsKeys_ = other.ifsKeys_;
    enabled_ = other.enabled_;
    isBuff_ = other.isBuff_;
    minHPTotal_ = other.minHPTotal_;
    afterEventKeys_ = other.afterEventKeys_;
    beforeEventKeys_ = other.beforeEventKeys_;
    aAID_ = other.aAID_;
    spellEffects_ = other.spellEffects_.Clone();
    afterEventDelay_ = other.afterEventDelay_;
    beforeEventDelay_ = other.beforeEventDelay_;
    afterSpellDelay_ = other.afterSpellDelay_;
    beforeSpellDelay_ = other.beforeSpellDelay_;
    afterCastDelay_ = other.afterCastDelay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public SpellData Clone() {
    return new SpellData(this);
  }

  /// <summary>Field number for the "SpellName" field.</summary>
  public const int SpellNameFieldNumber = 1;
  private string spellName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SpellName {
    get { return spellName_; }
    set {
      spellName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CastName" field.</summary>
  public const int CastNameFieldNumber = 2;
  private string castName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CastName {
    get { return castName_; }
    set {
      castName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Subcategory" field.</summary>
  public const int SubcategoryFieldNumber = 3;
  private string subcategory_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Subcategory {
    get { return subcategory_; }
    set {
      subcategory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Category" field.</summary>
  public const int CategoryFieldNumber = 4;
  private string category_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Category {
    get { return category_; }
    set {
      category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CastType" field.</summary>
  public const int CastTypeFieldNumber = 5;
  private global::SpellData.Types.CastingType castType_ = global::SpellData.Types.CastingType.Aa;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::SpellData.Types.CastingType CastType {
    get { return castType_; }
    set {
      castType_ = value;
    }
  }

  /// <summary>Field number for the "TargetType" field.</summary>
  public const int TargetTypeFieldNumber = 6;
  private string targetType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TargetType {
    get { return targetType_; }
    set {
      targetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "SpellGem" field.</summary>
  public const int SpellGemFieldNumber = 7;
  private int spellGem_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SpellGem {
    get { return spellGem_; }
    set {
      spellGem_ = value;
    }
  }

  /// <summary>Field number for the "GiveUpTimer" field.</summary>
  public const int GiveUpTimerFieldNumber = 8;
  private int giveUpTimer_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int GiveUpTimer {
    get { return giveUpTimer_; }
    set {
      giveUpTimer_ = value;
    }
  }

  /// <summary>Field number for the "MaxTries" field.</summary>
  public const int MaxTriesFieldNumber = 9;
  private int maxTries_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MaxTries {
    get { return maxTries_; }
    set {
      maxTries_ = value;
    }
  }

  /// <summary>Field number for the "Duration" field.</summary>
  public const int DurationFieldNumber = 10;
  private int duration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  /// <summary>Field number for the "DurationTotalSeconds" field.</summary>
  public const int DurationTotalSecondsFieldNumber = 11;
  private int durationTotalSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int DurationTotalSeconds {
    get { return durationTotalSeconds_; }
    set {
      durationTotalSeconds_ = value;
    }
  }

  /// <summary>Field number for the "RecastTime" field.</summary>
  public const int RecastTimeFieldNumber = 12;
  private int recastTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int RecastTime {
    get { return recastTime_; }
    set {
      recastTime_ = value;
    }
  }

  /// <summary>Field number for the "RecoveryTime" field.</summary>
  public const int RecoveryTimeFieldNumber = 13;
  private double recoveryTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double RecoveryTime {
    get { return recoveryTime_; }
    set {
      recoveryTime_ = value;
    }
  }

  /// <summary>Field number for the "myCastTime" field.</summary>
  public const int MyCastTimeFieldNumber = 14;
  private double myCastTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MyCastTime {
    get { return myCastTime_; }
    set {
      myCastTime_ = value;
    }
  }

  /// <summary>Field number for the "MyCastTimeInSeconds" field.</summary>
  public const int MyCastTimeInSecondsFieldNumber = 15;
  private double myCastTimeInSeconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MyCastTimeInSeconds {
    get { return myCastTimeInSeconds_; }
    set {
      myCastTimeInSeconds_ = value;
    }
  }

  /// <summary>Field number for the "MyRange" field.</summary>
  public const int MyRangeFieldNumber = 16;
  private double myRange_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double MyRange {
    get { return myRange_; }
    set {
      myRange_ = value;
    }
  }

  /// <summary>Field number for the "Mana" field.</summary>
  public const int ManaFieldNumber = 17;
  private int mana_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Mana {
    get { return mana_; }
    set {
      mana_ = value;
    }
  }

  /// <summary>Field number for the "MinMana" field.</summary>
  public const int MinManaFieldNumber = 18;
  private int minMana_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MinMana {
    get { return minMana_; }
    set {
      minMana_ = value;
    }
  }

  /// <summary>Field number for the "MaxMana" field.</summary>
  public const int MaxManaFieldNumber = 19;
  private int maxMana_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MaxMana {
    get { return maxMana_; }
    set {
      maxMana_ = value;
    }
  }

  /// <summary>Field number for the "MinHP" field.</summary>
  public const int MinHPFieldNumber = 20;
  private int minHP_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MinHP {
    get { return minHP_; }
    set {
      minHP_ = value;
    }
  }

  /// <summary>Field number for the "HealPct" field.</summary>
  public const int HealPctFieldNumber = 21;
  private int healPct_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int HealPct {
    get { return healPct_; }
    set {
      healPct_ = value;
    }
  }

  /// <summary>Field number for the "Debug" field.</summary>
  public const int DebugFieldNumber = 22;
  private bool debug_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Debug {
    get { return debug_; }
    set {
      debug_ = value;
    }
  }

  /// <summary>Field number for the "Reagent" field.</summary>
  public const int ReagentFieldNumber = 23;
  private string reagent_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Reagent {
    get { return reagent_; }
    set {
      reagent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ItemMustEquip" field.</summary>
  public const int ItemMustEquipFieldNumber = 24;
  private bool itemMustEquip_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ItemMustEquip {
    get { return itemMustEquip_; }
    set {
      itemMustEquip_ = value;
    }
  }

  /// <summary>Field number for the "NoBurn" field.</summary>
  public const int NoBurnFieldNumber = 25;
  private bool noBurn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoBurn {
    get { return noBurn_; }
    set {
      noBurn_ = value;
    }
  }

  /// <summary>Field number for the "NoTarget" field.</summary>
  public const int NoTargetFieldNumber = 26;
  private bool noTarget_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoTarget {
    get { return noTarget_; }
    set {
      noTarget_ = value;
    }
  }

  /// <summary>Field number for the "NoAggro" field.</summary>
  public const int NoAggroFieldNumber = 27;
  private bool noAggro_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoAggro {
    get { return noAggro_; }
    set {
      noAggro_ = value;
    }
  }

  /// <summary>Field number for the "Mode" field.</summary>
  public const int ModeFieldNumber = 28;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "EnduranceCost" field.</summary>
  public const int EnduranceCostFieldNumber = 29;
  private int enduranceCost_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int EnduranceCost {
    get { return enduranceCost_; }
    set {
      enduranceCost_ = value;
    }
  }

  /// <summary>Field number for the "Delay" field.</summary>
  public const int DelayFieldNumber = 30;
  private int delay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "AfterCastCompletedDelay" field.</summary>
  public const int AfterCastCompletedDelayFieldNumber = 31;
  private int afterCastCompletedDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AfterCastCompletedDelay {
    get { return afterCastCompletedDelay_; }
    set {
      afterCastCompletedDelay_ = value;
    }
  }

  /// <summary>Field number for the "CastID" field.</summary>
  public const int CastIDFieldNumber = 32;
  private int castID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CastID {
    get { return castID_; }
    set {
      castID_ = value;
    }
  }

  /// <summary>Field number for the "MinEnd" field.</summary>
  public const int MinEndFieldNumber = 33;
  private int minEnd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MinEnd {
    get { return minEnd_; }
    set {
      minEnd_ = value;
    }
  }

  /// <summary>Field number for the "CastInvis" field.</summary>
  public const int CastInvisFieldNumber = 34;
  private bool castInvis_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool CastInvis {
    get { return castInvis_; }
    set {
      castInvis_ = value;
    }
  }

  /// <summary>Field number for the "SpellType" field.</summary>
  public const int SpellTypeFieldNumber = 35;
  private string spellType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SpellType {
    get { return spellType_; }
    set {
      spellType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CastTarget" field.</summary>
  public const int CastTargetFieldNumber = 36;
  private string castTarget_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CastTarget {
    get { return castTarget_; }
    set {
      castTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "StackRequestTargets" field.</summary>
  public const int StackRequestTargetsFieldNumber = 37;
  private static readonly pb::FieldCodec<string> _repeated_stackRequestTargets_codec
      = pb::FieldCodec.ForString(298);
  private readonly pbc::RepeatedField<string> stackRequestTargets_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> StackRequestTargets {
    get { return stackRequestTargets_; }
  }

  /// <summary>Field number for the "StackIntervalCheck" field.</summary>
  public const int StackIntervalCheckFieldNumber = 38;
  private long stackIntervalCheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StackIntervalCheck {
    get { return stackIntervalCheck_; }
    set {
      stackIntervalCheck_ = value;
    }
  }

  /// <summary>Field number for the "StackIntervalNextCheck" field.</summary>
  public const int StackIntervalNextCheckFieldNumber = 39;
  private long stackIntervalNextCheck_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StackIntervalNextCheck {
    get { return stackIntervalNextCheck_; }
    set {
      stackIntervalNextCheck_ = value;
    }
  }

  /// <summary>Field number for the "StackRecastDelay" field.</summary>
  public const int StackRecastDelayFieldNumber = 40;
  private long stackRecastDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long StackRecastDelay {
    get { return stackRecastDelay_; }
    set {
      stackRecastDelay_ = value;
    }
  }

  /// <summary>Field number for the "StackRequestItem" field.</summary>
  public const int StackRequestItemFieldNumber = 41;
  private string stackRequestItem_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string StackRequestItem {
    get { return stackRequestItem_; }
    set {
      stackRequestItem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "GiftOfMana" field.</summary>
  public const int GiftOfManaFieldNumber = 42;
  private bool giftOfMana_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool GiftOfMana {
    get { return giftOfMana_; }
    set {
      giftOfMana_ = value;
    }
  }

  /// <summary>Field number for the "SpellID" field.</summary>
  public const int SpellIDFieldNumber = 43;
  private int spellID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SpellID {
    get { return spellID_; }
    set {
      spellID_ = value;
    }
  }

  /// <summary>Field number for the "PctAggro" field.</summary>
  public const int PctAggroFieldNumber = 44;
  private int pctAggro_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PctAggro {
    get { return pctAggro_; }
    set {
      pctAggro_ = value;
    }
  }

  /// <summary>Field number for the "Zone" field.</summary>
  public const int ZoneFieldNumber = 45;
  private string zone_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Zone {
    get { return zone_; }
    set {
      zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "MinSick" field.</summary>
  public const int MinSickFieldNumber = 46;
  private int minSick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MinSick {
    get { return minSick_; }
    set {
      minSick_ = value;
    }
  }

  /// <summary>Field number for the "AllowSpellSwap" field.</summary>
  public const int AllowSpellSwapFieldNumber = 47;
  private bool allowSpellSwap_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AllowSpellSwap {
    get { return allowSpellSwap_; }
    set {
      allowSpellSwap_ = value;
    }
  }

  /// <summary>Field number for the "NoEarlyRecast" field.</summary>
  public const int NoEarlyRecastFieldNumber = 48;
  private bool noEarlyRecast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoEarlyRecast {
    get { return noEarlyRecast_; }
    set {
      noEarlyRecast_ = value;
    }
  }

  /// <summary>Field number for the "NoStack" field.</summary>
  public const int NoStackFieldNumber = 49;
  private bool noStack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoStack {
    get { return noStack_; }
    set {
      noStack_ = value;
    }
  }

  /// <summary>Field number for the "TriggerSpell" field.</summary>
  public const int TriggerSpellFieldNumber = 50;
  private string triggerSpell_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TriggerSpell {
    get { return triggerSpell_; }
    set {
      triggerSpell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "BeforeSpell" field.</summary>
  public const int BeforeSpellFieldNumber = 51;
  private string beforeSpell_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BeforeSpell {
    get { return beforeSpell_; }
    set {
      beforeSpell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "NoInterrupt" field.</summary>
  public const int NoInterruptFieldNumber = 53;
  private bool noInterrupt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoInterrupt {
    get { return noInterrupt_; }
    set {
      noInterrupt_ = value;
    }
  }

  /// <summary>Field number for the "AfterEvent" field.</summary>
  public const int AfterEventFieldNumber = 54;
  private string afterEvent_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AfterEvent {
    get { return afterEvent_; }
    set {
      afterEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "BeforeEvent" field.</summary>
  public const int BeforeEventFieldNumber = 55;
  private string beforeEvent_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BeforeEvent {
    get { return beforeEvent_; }
    set {
      beforeEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "CastIF" field.</summary>
  public const int CastIFFieldNumber = 56;
  private string castIF_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CastIF {
    get { return castIF_; }
    set {
      castIF_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Ifs" field.</summary>
  public const int IfsFieldNumber = 57;
  private string ifs_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Ifs {
    get { return ifs_; }
    set {
      ifs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "InitName" field.</summary>
  public const int InitNameFieldNumber = 58;
  private string initName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string InitName {
    get { return initName_; }
    set {
      initName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ReagentOutOfStock" field.</summary>
  public const int ReagentOutOfStockFieldNumber = 59;
  private bool reagentOutOfStock_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool ReagentOutOfStock {
    get { return reagentOutOfStock_; }
    set {
      reagentOutOfStock_ = value;
    }
  }

  /// <summary>Field number for the "SpellInBook" field.</summary>
  public const int SpellInBookFieldNumber = 60;
  private bool spellInBook_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool SpellInBook {
    get { return spellInBook_; }
    set {
      spellInBook_ = value;
    }
  }

  /// <summary>Field number for the "SpellIcon" field.</summary>
  public const int SpellIconFieldNumber = 61;
  private int spellIcon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int SpellIcon {
    get { return spellIcon_; }
    set {
      spellIcon_ = value;
    }
  }

  /// <summary>Field number for the "NoMidSongCast" field.</summary>
  public const int NoMidSongCastFieldNumber = 62;
  private bool noMidSongCast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool NoMidSongCast {
    get { return noMidSongCast_; }
    set {
      noMidSongCast_ = value;
    }
  }

  /// <summary>Field number for the "MinDurationBeforeRecast" field.</summary>
  public const int MinDurationBeforeRecastFieldNumber = 63;
  private long minDurationBeforeRecast_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MinDurationBeforeRecast {
    get { return minDurationBeforeRecast_; }
    set {
      minDurationBeforeRecast_ = value;
    }
  }

  /// <summary>Field number for the "IsShortBuff" field.</summary>
  public const int IsShortBuffFieldNumber = 64;
  private bool isShortBuff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsShortBuff {
    get { return isShortBuff_; }
    set {
      isShortBuff_ = value;
    }
  }

  /// <summary>Field number for the "HealthMax" field.</summary>
  public const int HealthMaxFieldNumber = 65;
  private int healthMax_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int HealthMax {
    get { return healthMax_; }
    set {
      healthMax_ = value;
    }
  }

  /// <summary>Field number for the "IgnoreStackRules" field.</summary>
  public const int IgnoreStackRulesFieldNumber = 66;
  private bool ignoreStackRules_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IgnoreStackRules {
    get { return ignoreStackRules_; }
    set {
      ignoreStackRules_ = value;
    }
  }

  /// <summary>Field number for the "IsDebuff" field.</summary>
  public const int IsDebuffFieldNumber = 67;
  private bool isDebuff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDebuff {
    get { return isDebuff_; }
    set {
      isDebuff_ = value;
    }
  }

  /// <summary>Field number for the "IsDoT" field.</summary>
  public const int IsDoTFieldNumber = 68;
  private bool isDoT_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsDoT {
    get { return isDoT_; }
    set {
      isDoT_ = value;
    }
  }

  /// <summary>Field number for the "Rotate" field.</summary>
  public const int RotateFieldNumber = 69;
  private bool rotate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Rotate {
    get { return rotate_; }
    set {
      rotate_ = value;
    }
  }

  /// <summary>Field number for the "AfterSpell" field.</summary>
  public const int AfterSpellFieldNumber = 70;
  private string afterSpell_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AfterSpell {
    get { return afterSpell_; }
    set {
      afterSpell_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Level" field.</summary>
  public const int LevelFieldNumber = 71;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "Description" field.</summary>
  public const int DescriptionFieldNumber = 72;
  private string description_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ResistType" field.</summary>
  public const int ResistTypeFieldNumber = 73;
  private string resistType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ResistType {
    get { return resistType_; }
    set {
      resistType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ResistAdj" field.</summary>
  public const int ResistAdjFieldNumber = 74;
  private int resistAdj_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ResistAdj {
    get { return resistAdj_; }
    set {
      resistAdj_ = value;
    }
  }

  /// <summary>Field number for the "CastTypeOverride" field.</summary>
  public const int CastTypeOverrideFieldNumber = 75;
  private global::SpellData.Types.CastingType castTypeOverride_ = global::SpellData.Types.CastingType.Aa;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::SpellData.Types.CastingType CastTypeOverride {
    get { return castTypeOverride_; }
    set {
      castTypeOverride_ = value;
    }
  }

  /// <summary>Field number for the "CheckForCollection" field.</summary>
  public const int CheckForCollectionFieldNumber = 76;
  private static readonly pb::FieldCodec<string> _repeated_checkForCollection_codec
      = pb::FieldCodec.ForString(610);
  private readonly pbc::RepeatedField<string> checkForCollection_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> CheckForCollection {
    get { return checkForCollection_; }
  }

  /// <summary>Field number for the "IfsKeys" field.</summary>
  public const int IfsKeysFieldNumber = 77;
  private string ifsKeys_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string IfsKeys {
    get { return ifsKeys_; }
    set {
      ifsKeys_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Enabled" field.</summary>
  public const int EnabledFieldNumber = 78;
  private bool enabled_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  /// <summary>Field number for the "IsBuff" field.</summary>
  public const int IsBuffFieldNumber = 79;
  private bool isBuff_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsBuff {
    get { return isBuff_; }
    set {
      isBuff_ = value;
    }
  }

  /// <summary>Field number for the "MinHPTotal" field.</summary>
  public const int MinHPTotalFieldNumber = 80;
  private int minHPTotal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MinHPTotal {
    get { return minHPTotal_; }
    set {
      minHPTotal_ = value;
    }
  }

  /// <summary>Field number for the "AfterEventKeys" field.</summary>
  public const int AfterEventKeysFieldNumber = 81;
  private string afterEventKeys_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AfterEventKeys {
    get { return afterEventKeys_; }
    set {
      afterEventKeys_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "BeforeEventKeys" field.</summary>
  public const int BeforeEventKeysFieldNumber = 82;
  private string beforeEventKeys_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string BeforeEventKeys {
    get { return beforeEventKeys_; }
    set {
      beforeEventKeys_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "AAID" field.</summary>
  public const int AAIDFieldNumber = 83;
  private int aAID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AAID {
    get { return aAID_; }
    set {
      aAID_ = value;
    }
  }

  /// <summary>Field number for the "SpellEffects" field.</summary>
  public const int SpellEffectsFieldNumber = 84;
  private static readonly pb::FieldCodec<string> _repeated_spellEffects_codec
      = pb::FieldCodec.ForString(674);
  private readonly pbc::RepeatedField<string> spellEffects_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<string> SpellEffects {
    get { return spellEffects_; }
  }

  /// <summary>Field number for the "AfterEventDelay" field.</summary>
  public const int AfterEventDelayFieldNumber = 85;
  private int afterEventDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AfterEventDelay {
    get { return afterEventDelay_; }
    set {
      afterEventDelay_ = value;
    }
  }

  /// <summary>Field number for the "BeforeEventDelay" field.</summary>
  public const int BeforeEventDelayFieldNumber = 86;
  private int beforeEventDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BeforeEventDelay {
    get { return beforeEventDelay_; }
    set {
      beforeEventDelay_ = value;
    }
  }

  /// <summary>Field number for the "AfterSpellDelay" field.</summary>
  public const int AfterSpellDelayFieldNumber = 87;
  private int afterSpellDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AfterSpellDelay {
    get { return afterSpellDelay_; }
    set {
      afterSpellDelay_ = value;
    }
  }

  /// <summary>Field number for the "BeforeSpellDelay" field.</summary>
  public const int BeforeSpellDelayFieldNumber = 88;
  private int beforeSpellDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int BeforeSpellDelay {
    get { return beforeSpellDelay_; }
    set {
      beforeSpellDelay_ = value;
    }
  }

  /// <summary>Field number for the "AfterCastDelay" field.</summary>
  public const int AfterCastDelayFieldNumber = 89;
  private int afterCastDelay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int AfterCastDelay {
    get { return afterCastDelay_; }
    set {
      afterCastDelay_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as SpellData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(SpellData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SpellName != other.SpellName) return false;
    if (CastName != other.CastName) return false;
    if (Subcategory != other.Subcategory) return false;
    if (Category != other.Category) return false;
    if (CastType != other.CastType) return false;
    if (TargetType != other.TargetType) return false;
    if (SpellGem != other.SpellGem) return false;
    if (GiveUpTimer != other.GiveUpTimer) return false;
    if (MaxTries != other.MaxTries) return false;
    if (Duration != other.Duration) return false;
    if (DurationTotalSeconds != other.DurationTotalSeconds) return false;
    if (RecastTime != other.RecastTime) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RecoveryTime, other.RecoveryTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MyCastTime, other.MyCastTime)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MyCastTimeInSeconds, other.MyCastTimeInSeconds)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MyRange, other.MyRange)) return false;
    if (Mana != other.Mana) return false;
    if (MinMana != other.MinMana) return false;
    if (MaxMana != other.MaxMana) return false;
    if (MinHP != other.MinHP) return false;
    if (HealPct != other.HealPct) return false;
    if (Debug != other.Debug) return false;
    if (Reagent != other.Reagent) return false;
    if (ItemMustEquip != other.ItemMustEquip) return false;
    if (NoBurn != other.NoBurn) return false;
    if (NoTarget != other.NoTarget) return false;
    if (NoAggro != other.NoAggro) return false;
    if (Mode != other.Mode) return false;
    if (EnduranceCost != other.EnduranceCost) return false;
    if (Delay != other.Delay) return false;
    if (AfterCastCompletedDelay != other.AfterCastCompletedDelay) return false;
    if (CastID != other.CastID) return false;
    if (MinEnd != other.MinEnd) return false;
    if (CastInvis != other.CastInvis) return false;
    if (SpellType != other.SpellType) return false;
    if (CastTarget != other.CastTarget) return false;
    if(!stackRequestTargets_.Equals(other.stackRequestTargets_)) return false;
    if (StackIntervalCheck != other.StackIntervalCheck) return false;
    if (StackIntervalNextCheck != other.StackIntervalNextCheck) return false;
    if (StackRecastDelay != other.StackRecastDelay) return false;
    if (StackRequestItem != other.StackRequestItem) return false;
    if (GiftOfMana != other.GiftOfMana) return false;
    if (SpellID != other.SpellID) return false;
    if (PctAggro != other.PctAggro) return false;
    if (Zone != other.Zone) return false;
    if (MinSick != other.MinSick) return false;
    if (AllowSpellSwap != other.AllowSpellSwap) return false;
    if (NoEarlyRecast != other.NoEarlyRecast) return false;
    if (NoStack != other.NoStack) return false;
    if (TriggerSpell != other.TriggerSpell) return false;
    if (BeforeSpell != other.BeforeSpell) return false;
    if (NoInterrupt != other.NoInterrupt) return false;
    if (AfterEvent != other.AfterEvent) return false;
    if (BeforeEvent != other.BeforeEvent) return false;
    if (CastIF != other.CastIF) return false;
    if (Ifs != other.Ifs) return false;
    if (InitName != other.InitName) return false;
    if (ReagentOutOfStock != other.ReagentOutOfStock) return false;
    if (SpellInBook != other.SpellInBook) return false;
    if (SpellIcon != other.SpellIcon) return false;
    if (NoMidSongCast != other.NoMidSongCast) return false;
    if (MinDurationBeforeRecast != other.MinDurationBeforeRecast) return false;
    if (IsShortBuff != other.IsShortBuff) return false;
    if (HealthMax != other.HealthMax) return false;
    if (IgnoreStackRules != other.IgnoreStackRules) return false;
    if (IsDebuff != other.IsDebuff) return false;
    if (IsDoT != other.IsDoT) return false;
    if (Rotate != other.Rotate) return false;
    if (AfterSpell != other.AfterSpell) return false;
    if (Level != other.Level) return false;
    if (Description != other.Description) return false;
    if (ResistType != other.ResistType) return false;
    if (ResistAdj != other.ResistAdj) return false;
    if (CastTypeOverride != other.CastTypeOverride) return false;
    if(!checkForCollection_.Equals(other.checkForCollection_)) return false;
    if (IfsKeys != other.IfsKeys) return false;
    if (Enabled != other.Enabled) return false;
    if (IsBuff != other.IsBuff) return false;
    if (MinHPTotal != other.MinHPTotal) return false;
    if (AfterEventKeys != other.AfterEventKeys) return false;
    if (BeforeEventKeys != other.BeforeEventKeys) return false;
    if (AAID != other.AAID) return false;
    if(!spellEffects_.Equals(other.spellEffects_)) return false;
    if (AfterEventDelay != other.AfterEventDelay) return false;
    if (BeforeEventDelay != other.BeforeEventDelay) return false;
    if (AfterSpellDelay != other.AfterSpellDelay) return false;
    if (BeforeSpellDelay != other.BeforeSpellDelay) return false;
    if (AfterCastDelay != other.AfterCastDelay) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (SpellName.Length != 0) hash ^= SpellName.GetHashCode();
    if (CastName.Length != 0) hash ^= CastName.GetHashCode();
    if (Subcategory.Length != 0) hash ^= Subcategory.GetHashCode();
    if (Category.Length != 0) hash ^= Category.GetHashCode();
    if (CastType != global::SpellData.Types.CastingType.Aa) hash ^= CastType.GetHashCode();
    if (TargetType.Length != 0) hash ^= TargetType.GetHashCode();
    if (SpellGem != 0) hash ^= SpellGem.GetHashCode();
    if (GiveUpTimer != 0) hash ^= GiveUpTimer.GetHashCode();
    if (MaxTries != 0) hash ^= MaxTries.GetHashCode();
    if (Duration != 0) hash ^= Duration.GetHashCode();
    if (DurationTotalSeconds != 0) hash ^= DurationTotalSeconds.GetHashCode();
    if (RecastTime != 0) hash ^= RecastTime.GetHashCode();
    if (RecoveryTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RecoveryTime);
    if (MyCastTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MyCastTime);
    if (MyCastTimeInSeconds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MyCastTimeInSeconds);
    if (MyRange != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MyRange);
    if (Mana != 0) hash ^= Mana.GetHashCode();
    if (MinMana != 0) hash ^= MinMana.GetHashCode();
    if (MaxMana != 0) hash ^= MaxMana.GetHashCode();
    if (MinHP != 0) hash ^= MinHP.GetHashCode();
    if (HealPct != 0) hash ^= HealPct.GetHashCode();
    if (Debug != false) hash ^= Debug.GetHashCode();
    if (Reagent.Length != 0) hash ^= Reagent.GetHashCode();
    if (ItemMustEquip != false) hash ^= ItemMustEquip.GetHashCode();
    if (NoBurn != false) hash ^= NoBurn.GetHashCode();
    if (NoTarget != false) hash ^= NoTarget.GetHashCode();
    if (NoAggro != false) hash ^= NoAggro.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (EnduranceCost != 0) hash ^= EnduranceCost.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (AfterCastCompletedDelay != 0) hash ^= AfterCastCompletedDelay.GetHashCode();
    if (CastID != 0) hash ^= CastID.GetHashCode();
    if (MinEnd != 0) hash ^= MinEnd.GetHashCode();
    if (CastInvis != false) hash ^= CastInvis.GetHashCode();
    if (SpellType.Length != 0) hash ^= SpellType.GetHashCode();
    if (CastTarget.Length != 0) hash ^= CastTarget.GetHashCode();
    hash ^= stackRequestTargets_.GetHashCode();
    if (StackIntervalCheck != 0L) hash ^= StackIntervalCheck.GetHashCode();
    if (StackIntervalNextCheck != 0L) hash ^= StackIntervalNextCheck.GetHashCode();
    if (StackRecastDelay != 0L) hash ^= StackRecastDelay.GetHashCode();
    if (StackRequestItem.Length != 0) hash ^= StackRequestItem.GetHashCode();
    if (GiftOfMana != false) hash ^= GiftOfMana.GetHashCode();
    if (SpellID != 0) hash ^= SpellID.GetHashCode();
    if (PctAggro != 0) hash ^= PctAggro.GetHashCode();
    if (Zone.Length != 0) hash ^= Zone.GetHashCode();
    if (MinSick != 0) hash ^= MinSick.GetHashCode();
    if (AllowSpellSwap != false) hash ^= AllowSpellSwap.GetHashCode();
    if (NoEarlyRecast != false) hash ^= NoEarlyRecast.GetHashCode();
    if (NoStack != false) hash ^= NoStack.GetHashCode();
    if (TriggerSpell.Length != 0) hash ^= TriggerSpell.GetHashCode();
    if (BeforeSpell.Length != 0) hash ^= BeforeSpell.GetHashCode();
    if (NoInterrupt != false) hash ^= NoInterrupt.GetHashCode();
    if (AfterEvent.Length != 0) hash ^= AfterEvent.GetHashCode();
    if (BeforeEvent.Length != 0) hash ^= BeforeEvent.GetHashCode();
    if (CastIF.Length != 0) hash ^= CastIF.GetHashCode();
    if (Ifs.Length != 0) hash ^= Ifs.GetHashCode();
    if (InitName.Length != 0) hash ^= InitName.GetHashCode();
    if (ReagentOutOfStock != false) hash ^= ReagentOutOfStock.GetHashCode();
    if (SpellInBook != false) hash ^= SpellInBook.GetHashCode();
    if (SpellIcon != 0) hash ^= SpellIcon.GetHashCode();
    if (NoMidSongCast != false) hash ^= NoMidSongCast.GetHashCode();
    if (MinDurationBeforeRecast != 0L) hash ^= MinDurationBeforeRecast.GetHashCode();
    if (IsShortBuff != false) hash ^= IsShortBuff.GetHashCode();
    if (HealthMax != 0) hash ^= HealthMax.GetHashCode();
    if (IgnoreStackRules != false) hash ^= IgnoreStackRules.GetHashCode();
    if (IsDebuff != false) hash ^= IsDebuff.GetHashCode();
    if (IsDoT != false) hash ^= IsDoT.GetHashCode();
    if (Rotate != false) hash ^= Rotate.GetHashCode();
    if (AfterSpell.Length != 0) hash ^= AfterSpell.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (ResistType.Length != 0) hash ^= ResistType.GetHashCode();
    if (ResistAdj != 0) hash ^= ResistAdj.GetHashCode();
    if (CastTypeOverride != global::SpellData.Types.CastingType.Aa) hash ^= CastTypeOverride.GetHashCode();
    hash ^= checkForCollection_.GetHashCode();
    if (IfsKeys.Length != 0) hash ^= IfsKeys.GetHashCode();
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    if (IsBuff != false) hash ^= IsBuff.GetHashCode();
    if (MinHPTotal != 0) hash ^= MinHPTotal.GetHashCode();
    if (AfterEventKeys.Length != 0) hash ^= AfterEventKeys.GetHashCode();
    if (BeforeEventKeys.Length != 0) hash ^= BeforeEventKeys.GetHashCode();
    if (AAID != 0) hash ^= AAID.GetHashCode();
    hash ^= spellEffects_.GetHashCode();
    if (AfterEventDelay != 0) hash ^= AfterEventDelay.GetHashCode();
    if (BeforeEventDelay != 0) hash ^= BeforeEventDelay.GetHashCode();
    if (AfterSpellDelay != 0) hash ^= AfterSpellDelay.GetHashCode();
    if (BeforeSpellDelay != 0) hash ^= BeforeSpellDelay.GetHashCode();
    if (AfterCastDelay != 0) hash ^= AfterCastDelay.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (SpellName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SpellName);
    }
    if (CastName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CastName);
    }
    if (Subcategory.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Subcategory);
    }
    if (Category.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Category);
    }
    if (CastType != global::SpellData.Types.CastingType.Aa) {
      output.WriteRawTag(40);
      output.WriteEnum((int) CastType);
    }
    if (TargetType.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(TargetType);
    }
    if (SpellGem != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(SpellGem);
    }
    if (GiveUpTimer != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GiveUpTimer);
    }
    if (MaxTries != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(MaxTries);
    }
    if (Duration != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Duration);
    }
    if (DurationTotalSeconds != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(DurationTotalSeconds);
    }
    if (RecastTime != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(RecastTime);
    }
    if (RecoveryTime != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(RecoveryTime);
    }
    if (MyCastTime != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(MyCastTime);
    }
    if (MyCastTimeInSeconds != 0D) {
      output.WriteRawTag(121);
      output.WriteDouble(MyCastTimeInSeconds);
    }
    if (MyRange != 0D) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(MyRange);
    }
    if (Mana != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(Mana);
    }
    if (MinMana != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(MinMana);
    }
    if (MaxMana != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(MaxMana);
    }
    if (MinHP != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(MinHP);
    }
    if (HealPct != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(HealPct);
    }
    if (Debug != false) {
      output.WriteRawTag(176, 1);
      output.WriteBool(Debug);
    }
    if (Reagent.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(Reagent);
    }
    if (ItemMustEquip != false) {
      output.WriteRawTag(192, 1);
      output.WriteBool(ItemMustEquip);
    }
    if (NoBurn != false) {
      output.WriteRawTag(200, 1);
      output.WriteBool(NoBurn);
    }
    if (NoTarget != false) {
      output.WriteRawTag(208, 1);
      output.WriteBool(NoTarget);
    }
    if (NoAggro != false) {
      output.WriteRawTag(216, 1);
      output.WriteBool(NoAggro);
    }
    if (Mode != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(Mode);
    }
    if (EnduranceCost != 0) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(EnduranceCost);
    }
    if (Delay != 0) {
      output.WriteRawTag(240, 1);
      output.WriteInt32(Delay);
    }
    if (AfterCastCompletedDelay != 0) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(AfterCastCompletedDelay);
    }
    if (CastID != 0) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(CastID);
    }
    if (MinEnd != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(MinEnd);
    }
    if (CastInvis != false) {
      output.WriteRawTag(144, 2);
      output.WriteBool(CastInvis);
    }
    if (SpellType.Length != 0) {
      output.WriteRawTag(154, 2);
      output.WriteString(SpellType);
    }
    if (CastTarget.Length != 0) {
      output.WriteRawTag(162, 2);
      output.WriteString(CastTarget);
    }
    stackRequestTargets_.WriteTo(output, _repeated_stackRequestTargets_codec);
    if (StackIntervalCheck != 0L) {
      output.WriteRawTag(176, 2);
      output.WriteInt64(StackIntervalCheck);
    }
    if (StackIntervalNextCheck != 0L) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(StackIntervalNextCheck);
    }
    if (StackRecastDelay != 0L) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(StackRecastDelay);
    }
    if (StackRequestItem.Length != 0) {
      output.WriteRawTag(202, 2);
      output.WriteString(StackRequestItem);
    }
    if (GiftOfMana != false) {
      output.WriteRawTag(208, 2);
      output.WriteBool(GiftOfMana);
    }
    if (SpellID != 0) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(SpellID);
    }
    if (PctAggro != 0) {
      output.WriteRawTag(224, 2);
      output.WriteInt32(PctAggro);
    }
    if (Zone.Length != 0) {
      output.WriteRawTag(234, 2);
      output.WriteString(Zone);
    }
    if (MinSick != 0) {
      output.WriteRawTag(240, 2);
      output.WriteInt32(MinSick);
    }
    if (AllowSpellSwap != false) {
      output.WriteRawTag(248, 2);
      output.WriteBool(AllowSpellSwap);
    }
    if (NoEarlyRecast != false) {
      output.WriteRawTag(128, 3);
      output.WriteBool(NoEarlyRecast);
    }
    if (NoStack != false) {
      output.WriteRawTag(136, 3);
      output.WriteBool(NoStack);
    }
    if (TriggerSpell.Length != 0) {
      output.WriteRawTag(146, 3);
      output.WriteString(TriggerSpell);
    }
    if (BeforeSpell.Length != 0) {
      output.WriteRawTag(154, 3);
      output.WriteString(BeforeSpell);
    }
    if (NoInterrupt != false) {
      output.WriteRawTag(168, 3);
      output.WriteBool(NoInterrupt);
    }
    if (AfterEvent.Length != 0) {
      output.WriteRawTag(178, 3);
      output.WriteString(AfterEvent);
    }
    if (BeforeEvent.Length != 0) {
      output.WriteRawTag(186, 3);
      output.WriteString(BeforeEvent);
    }
    if (CastIF.Length != 0) {
      output.WriteRawTag(194, 3);
      output.WriteString(CastIF);
    }
    if (Ifs.Length != 0) {
      output.WriteRawTag(202, 3);
      output.WriteString(Ifs);
    }
    if (InitName.Length != 0) {
      output.WriteRawTag(210, 3);
      output.WriteString(InitName);
    }
    if (ReagentOutOfStock != false) {
      output.WriteRawTag(216, 3);
      output.WriteBool(ReagentOutOfStock);
    }
    if (SpellInBook != false) {
      output.WriteRawTag(224, 3);
      output.WriteBool(SpellInBook);
    }
    if (SpellIcon != 0) {
      output.WriteRawTag(232, 3);
      output.WriteInt32(SpellIcon);
    }
    if (NoMidSongCast != false) {
      output.WriteRawTag(240, 3);
      output.WriteBool(NoMidSongCast);
    }
    if (MinDurationBeforeRecast != 0L) {
      output.WriteRawTag(248, 3);
      output.WriteInt64(MinDurationBeforeRecast);
    }
    if (IsShortBuff != false) {
      output.WriteRawTag(128, 4);
      output.WriteBool(IsShortBuff);
    }
    if (HealthMax != 0) {
      output.WriteRawTag(136, 4);
      output.WriteInt32(HealthMax);
    }
    if (IgnoreStackRules != false) {
      output.WriteRawTag(144, 4);
      output.WriteBool(IgnoreStackRules);
    }
    if (IsDebuff != false) {
      output.WriteRawTag(152, 4);
      output.WriteBool(IsDebuff);
    }
    if (IsDoT != false) {
      output.WriteRawTag(160, 4);
      output.WriteBool(IsDoT);
    }
    if (Rotate != false) {
      output.WriteRawTag(168, 4);
      output.WriteBool(Rotate);
    }
    if (AfterSpell.Length != 0) {
      output.WriteRawTag(178, 4);
      output.WriteString(AfterSpell);
    }
    if (Level != 0) {
      output.WriteRawTag(184, 4);
      output.WriteInt32(Level);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(194, 4);
      output.WriteString(Description);
    }
    if (ResistType.Length != 0) {
      output.WriteRawTag(202, 4);
      output.WriteString(ResistType);
    }
    if (ResistAdj != 0) {
      output.WriteRawTag(208, 4);
      output.WriteInt32(ResistAdj);
    }
    if (CastTypeOverride != global::SpellData.Types.CastingType.Aa) {
      output.WriteRawTag(216, 4);
      output.WriteEnum((int) CastTypeOverride);
    }
    checkForCollection_.WriteTo(output, _repeated_checkForCollection_codec);
    if (IfsKeys.Length != 0) {
      output.WriteRawTag(234, 4);
      output.WriteString(IfsKeys);
    }
    if (Enabled != false) {
      output.WriteRawTag(240, 4);
      output.WriteBool(Enabled);
    }
    if (IsBuff != false) {
      output.WriteRawTag(248, 4);
      output.WriteBool(IsBuff);
    }
    if (MinHPTotal != 0) {
      output.WriteRawTag(128, 5);
      output.WriteInt32(MinHPTotal);
    }
    if (AfterEventKeys.Length != 0) {
      output.WriteRawTag(138, 5);
      output.WriteString(AfterEventKeys);
    }
    if (BeforeEventKeys.Length != 0) {
      output.WriteRawTag(146, 5);
      output.WriteString(BeforeEventKeys);
    }
    if (AAID != 0) {
      output.WriteRawTag(152, 5);
      output.WriteInt32(AAID);
    }
    spellEffects_.WriteTo(output, _repeated_spellEffects_codec);
    if (AfterEventDelay != 0) {
      output.WriteRawTag(168, 5);
      output.WriteInt32(AfterEventDelay);
    }
    if (BeforeEventDelay != 0) {
      output.WriteRawTag(176, 5);
      output.WriteInt32(BeforeEventDelay);
    }
    if (AfterSpellDelay != 0) {
      output.WriteRawTag(184, 5);
      output.WriteInt32(AfterSpellDelay);
    }
    if (BeforeSpellDelay != 0) {
      output.WriteRawTag(192, 5);
      output.WriteInt32(BeforeSpellDelay);
    }
    if (AfterCastDelay != 0) {
      output.WriteRawTag(200, 5);
      output.WriteInt32(AfterCastDelay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (SpellName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SpellName);
    }
    if (CastName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CastName);
    }
    if (Subcategory.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Subcategory);
    }
    if (Category.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Category);
    }
    if (CastType != global::SpellData.Types.CastingType.Aa) {
      output.WriteRawTag(40);
      output.WriteEnum((int) CastType);
    }
    if (TargetType.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(TargetType);
    }
    if (SpellGem != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(SpellGem);
    }
    if (GiveUpTimer != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(GiveUpTimer);
    }
    if (MaxTries != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(MaxTries);
    }
    if (Duration != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Duration);
    }
    if (DurationTotalSeconds != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(DurationTotalSeconds);
    }
    if (RecastTime != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(RecastTime);
    }
    if (RecoveryTime != 0D) {
      output.WriteRawTag(105);
      output.WriteDouble(RecoveryTime);
    }
    if (MyCastTime != 0D) {
      output.WriteRawTag(113);
      output.WriteDouble(MyCastTime);
    }
    if (MyCastTimeInSeconds != 0D) {
      output.WriteRawTag(121);
      output.WriteDouble(MyCastTimeInSeconds);
    }
    if (MyRange != 0D) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(MyRange);
    }
    if (Mana != 0) {
      output.WriteRawTag(136, 1);
      output.WriteInt32(Mana);
    }
    if (MinMana != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(MinMana);
    }
    if (MaxMana != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(MaxMana);
    }
    if (MinHP != 0) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(MinHP);
    }
    if (HealPct != 0) {
      output.WriteRawTag(168, 1);
      output.WriteInt32(HealPct);
    }
    if (Debug != false) {
      output.WriteRawTag(176, 1);
      output.WriteBool(Debug);
    }
    if (Reagent.Length != 0) {
      output.WriteRawTag(186, 1);
      output.WriteString(Reagent);
    }
    if (ItemMustEquip != false) {
      output.WriteRawTag(192, 1);
      output.WriteBool(ItemMustEquip);
    }
    if (NoBurn != false) {
      output.WriteRawTag(200, 1);
      output.WriteBool(NoBurn);
    }
    if (NoTarget != false) {
      output.WriteRawTag(208, 1);
      output.WriteBool(NoTarget);
    }
    if (NoAggro != false) {
      output.WriteRawTag(216, 1);
      output.WriteBool(NoAggro);
    }
    if (Mode != 0) {
      output.WriteRawTag(224, 1);
      output.WriteInt32(Mode);
    }
    if (EnduranceCost != 0) {
      output.WriteRawTag(232, 1);
      output.WriteInt32(EnduranceCost);
    }
    if (Delay != 0) {
      output.WriteRawTag(240, 1);
      output.WriteInt32(Delay);
    }
    if (AfterCastCompletedDelay != 0) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(AfterCastCompletedDelay);
    }
    if (CastID != 0) {
      output.WriteRawTag(128, 2);
      output.WriteInt32(CastID);
    }
    if (MinEnd != 0) {
      output.WriteRawTag(136, 2);
      output.WriteInt32(MinEnd);
    }
    if (CastInvis != false) {
      output.WriteRawTag(144, 2);
      output.WriteBool(CastInvis);
    }
    if (SpellType.Length != 0) {
      output.WriteRawTag(154, 2);
      output.WriteString(SpellType);
    }
    if (CastTarget.Length != 0) {
      output.WriteRawTag(162, 2);
      output.WriteString(CastTarget);
    }
    stackRequestTargets_.WriteTo(ref output, _repeated_stackRequestTargets_codec);
    if (StackIntervalCheck != 0L) {
      output.WriteRawTag(176, 2);
      output.WriteInt64(StackIntervalCheck);
    }
    if (StackIntervalNextCheck != 0L) {
      output.WriteRawTag(184, 2);
      output.WriteInt64(StackIntervalNextCheck);
    }
    if (StackRecastDelay != 0L) {
      output.WriteRawTag(192, 2);
      output.WriteInt64(StackRecastDelay);
    }
    if (StackRequestItem.Length != 0) {
      output.WriteRawTag(202, 2);
      output.WriteString(StackRequestItem);
    }
    if (GiftOfMana != false) {
      output.WriteRawTag(208, 2);
      output.WriteBool(GiftOfMana);
    }
    if (SpellID != 0) {
      output.WriteRawTag(216, 2);
      output.WriteInt32(SpellID);
    }
    if (PctAggro != 0) {
      output.WriteRawTag(224, 2);
      output.WriteInt32(PctAggro);
    }
    if (Zone.Length != 0) {
      output.WriteRawTag(234, 2);
      output.WriteString(Zone);
    }
    if (MinSick != 0) {
      output.WriteRawTag(240, 2);
      output.WriteInt32(MinSick);
    }
    if (AllowSpellSwap != false) {
      output.WriteRawTag(248, 2);
      output.WriteBool(AllowSpellSwap);
    }
    if (NoEarlyRecast != false) {
      output.WriteRawTag(128, 3);
      output.WriteBool(NoEarlyRecast);
    }
    if (NoStack != false) {
      output.WriteRawTag(136, 3);
      output.WriteBool(NoStack);
    }
    if (TriggerSpell.Length != 0) {
      output.WriteRawTag(146, 3);
      output.WriteString(TriggerSpell);
    }
    if (BeforeSpell.Length != 0) {
      output.WriteRawTag(154, 3);
      output.WriteString(BeforeSpell);
    }
    if (NoInterrupt != false) {
      output.WriteRawTag(168, 3);
      output.WriteBool(NoInterrupt);
    }
    if (AfterEvent.Length != 0) {
      output.WriteRawTag(178, 3);
      output.WriteString(AfterEvent);
    }
    if (BeforeEvent.Length != 0) {
      output.WriteRawTag(186, 3);
      output.WriteString(BeforeEvent);
    }
    if (CastIF.Length != 0) {
      output.WriteRawTag(194, 3);
      output.WriteString(CastIF);
    }
    if (Ifs.Length != 0) {
      output.WriteRawTag(202, 3);
      output.WriteString(Ifs);
    }
    if (InitName.Length != 0) {
      output.WriteRawTag(210, 3);
      output.WriteString(InitName);
    }
    if (ReagentOutOfStock != false) {
      output.WriteRawTag(216, 3);
      output.WriteBool(ReagentOutOfStock);
    }
    if (SpellInBook != false) {
      output.WriteRawTag(224, 3);
      output.WriteBool(SpellInBook);
    }
    if (SpellIcon != 0) {
      output.WriteRawTag(232, 3);
      output.WriteInt32(SpellIcon);
    }
    if (NoMidSongCast != false) {
      output.WriteRawTag(240, 3);
      output.WriteBool(NoMidSongCast);
    }
    if (MinDurationBeforeRecast != 0L) {
      output.WriteRawTag(248, 3);
      output.WriteInt64(MinDurationBeforeRecast);
    }
    if (IsShortBuff != false) {
      output.WriteRawTag(128, 4);
      output.WriteBool(IsShortBuff);
    }
    if (HealthMax != 0) {
      output.WriteRawTag(136, 4);
      output.WriteInt32(HealthMax);
    }
    if (IgnoreStackRules != false) {
      output.WriteRawTag(144, 4);
      output.WriteBool(IgnoreStackRules);
    }
    if (IsDebuff != false) {
      output.WriteRawTag(152, 4);
      output.WriteBool(IsDebuff);
    }
    if (IsDoT != false) {
      output.WriteRawTag(160, 4);
      output.WriteBool(IsDoT);
    }
    if (Rotate != false) {
      output.WriteRawTag(168, 4);
      output.WriteBool(Rotate);
    }
    if (AfterSpell.Length != 0) {
      output.WriteRawTag(178, 4);
      output.WriteString(AfterSpell);
    }
    if (Level != 0) {
      output.WriteRawTag(184, 4);
      output.WriteInt32(Level);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(194, 4);
      output.WriteString(Description);
    }
    if (ResistType.Length != 0) {
      output.WriteRawTag(202, 4);
      output.WriteString(ResistType);
    }
    if (ResistAdj != 0) {
      output.WriteRawTag(208, 4);
      output.WriteInt32(ResistAdj);
    }
    if (CastTypeOverride != global::SpellData.Types.CastingType.Aa) {
      output.WriteRawTag(216, 4);
      output.WriteEnum((int) CastTypeOverride);
    }
    checkForCollection_.WriteTo(ref output, _repeated_checkForCollection_codec);
    if (IfsKeys.Length != 0) {
      output.WriteRawTag(234, 4);
      output.WriteString(IfsKeys);
    }
    if (Enabled != false) {
      output.WriteRawTag(240, 4);
      output.WriteBool(Enabled);
    }
    if (IsBuff != false) {
      output.WriteRawTag(248, 4);
      output.WriteBool(IsBuff);
    }
    if (MinHPTotal != 0) {
      output.WriteRawTag(128, 5);
      output.WriteInt32(MinHPTotal);
    }
    if (AfterEventKeys.Length != 0) {
      output.WriteRawTag(138, 5);
      output.WriteString(AfterEventKeys);
    }
    if (BeforeEventKeys.Length != 0) {
      output.WriteRawTag(146, 5);
      output.WriteString(BeforeEventKeys);
    }
    if (AAID != 0) {
      output.WriteRawTag(152, 5);
      output.WriteInt32(AAID);
    }
    spellEffects_.WriteTo(ref output, _repeated_spellEffects_codec);
    if (AfterEventDelay != 0) {
      output.WriteRawTag(168, 5);
      output.WriteInt32(AfterEventDelay);
    }
    if (BeforeEventDelay != 0) {
      output.WriteRawTag(176, 5);
      output.WriteInt32(BeforeEventDelay);
    }
    if (AfterSpellDelay != 0) {
      output.WriteRawTag(184, 5);
      output.WriteInt32(AfterSpellDelay);
    }
    if (BeforeSpellDelay != 0) {
      output.WriteRawTag(192, 5);
      output.WriteInt32(BeforeSpellDelay);
    }
    if (AfterCastDelay != 0) {
      output.WriteRawTag(200, 5);
      output.WriteInt32(AfterCastDelay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (SpellName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SpellName);
    }
    if (CastName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CastName);
    }
    if (Subcategory.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Subcategory);
    }
    if (Category.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
    }
    if (CastType != global::SpellData.Types.CastingType.Aa) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CastType);
    }
    if (TargetType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetType);
    }
    if (SpellGem != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpellGem);
    }
    if (GiveUpTimer != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiveUpTimer);
    }
    if (MaxTries != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTries);
    }
    if (Duration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
    }
    if (DurationTotalSeconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationTotalSeconds);
    }
    if (RecastTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecastTime);
    }
    if (RecoveryTime != 0D) {
      size += 1 + 8;
    }
    if (MyCastTime != 0D) {
      size += 1 + 8;
    }
    if (MyCastTimeInSeconds != 0D) {
      size += 1 + 8;
    }
    if (MyRange != 0D) {
      size += 2 + 8;
    }
    if (Mana != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mana);
    }
    if (MinMana != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinMana);
    }
    if (MaxMana != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxMana);
    }
    if (MinHP != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinHP);
    }
    if (HealPct != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HealPct);
    }
    if (Debug != false) {
      size += 2 + 1;
    }
    if (Reagent.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Reagent);
    }
    if (ItemMustEquip != false) {
      size += 2 + 1;
    }
    if (NoBurn != false) {
      size += 2 + 1;
    }
    if (NoTarget != false) {
      size += 2 + 1;
    }
    if (NoAggro != false) {
      size += 2 + 1;
    }
    if (Mode != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (EnduranceCost != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnduranceCost);
    }
    if (Delay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Delay);
    }
    if (AfterCastCompletedDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterCastCompletedDelay);
    }
    if (CastID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CastID);
    }
    if (MinEnd != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinEnd);
    }
    if (CastInvis != false) {
      size += 2 + 1;
    }
    if (SpellType.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SpellType);
    }
    if (CastTarget.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CastTarget);
    }
    size += stackRequestTargets_.CalculateSize(_repeated_stackRequestTargets_codec);
    if (StackIntervalCheck != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(StackIntervalCheck);
    }
    if (StackIntervalNextCheck != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(StackIntervalNextCheck);
    }
    if (StackRecastDelay != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(StackRecastDelay);
    }
    if (StackRequestItem.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(StackRequestItem);
    }
    if (GiftOfMana != false) {
      size += 2 + 1;
    }
    if (SpellID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellID);
    }
    if (PctAggro != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(PctAggro);
    }
    if (Zone.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Zone);
    }
    if (MinSick != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinSick);
    }
    if (AllowSpellSwap != false) {
      size += 2 + 1;
    }
    if (NoEarlyRecast != false) {
      size += 2 + 1;
    }
    if (NoStack != false) {
      size += 2 + 1;
    }
    if (TriggerSpell.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerSpell);
    }
    if (BeforeSpell.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BeforeSpell);
    }
    if (NoInterrupt != false) {
      size += 2 + 1;
    }
    if (AfterEvent.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AfterEvent);
    }
    if (BeforeEvent.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BeforeEvent);
    }
    if (CastIF.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CastIF);
    }
    if (Ifs.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Ifs);
    }
    if (InitName.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(InitName);
    }
    if (ReagentOutOfStock != false) {
      size += 2 + 1;
    }
    if (SpellInBook != false) {
      size += 2 + 1;
    }
    if (SpellIcon != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpellIcon);
    }
    if (NoMidSongCast != false) {
      size += 2 + 1;
    }
    if (MinDurationBeforeRecast != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MinDurationBeforeRecast);
    }
    if (IsShortBuff != false) {
      size += 2 + 1;
    }
    if (HealthMax != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HealthMax);
    }
    if (IgnoreStackRules != false) {
      size += 2 + 1;
    }
    if (IsDebuff != false) {
      size += 2 + 1;
    }
    if (IsDoT != false) {
      size += 2 + 1;
    }
    if (Rotate != false) {
      size += 2 + 1;
    }
    if (AfterSpell.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AfterSpell);
    }
    if (Level != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Description.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (ResistType.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ResistType);
    }
    if (ResistAdj != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ResistAdj);
    }
    if (CastTypeOverride != global::SpellData.Types.CastingType.Aa) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CastTypeOverride);
    }
    size += checkForCollection_.CalculateSize(_repeated_checkForCollection_codec);
    if (IfsKeys.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(IfsKeys);
    }
    if (Enabled != false) {
      size += 2 + 1;
    }
    if (IsBuff != false) {
      size += 2 + 1;
    }
    if (MinHPTotal != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinHPTotal);
    }
    if (AfterEventKeys.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AfterEventKeys);
    }
    if (BeforeEventKeys.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(BeforeEventKeys);
    }
    if (AAID != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AAID);
    }
    size += spellEffects_.CalculateSize(_repeated_spellEffects_codec);
    if (AfterEventDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterEventDelay);
    }
    if (BeforeEventDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeforeEventDelay);
    }
    if (AfterSpellDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterSpellDelay);
    }
    if (BeforeSpellDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(BeforeSpellDelay);
    }
    if (AfterCastDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(AfterCastDelay);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(SpellData other) {
    if (other == null) {
      return;
    }
    if (other.SpellName.Length != 0) {
      SpellName = other.SpellName;
    }
    if (other.CastName.Length != 0) {
      CastName = other.CastName;
    }
    if (other.Subcategory.Length != 0) {
      Subcategory = other.Subcategory;
    }
    if (other.Category.Length != 0) {
      Category = other.Category;
    }
    if (other.CastType != global::SpellData.Types.CastingType.Aa) {
      CastType = other.CastType;
    }
    if (other.TargetType.Length != 0) {
      TargetType = other.TargetType;
    }
    if (other.SpellGem != 0) {
      SpellGem = other.SpellGem;
    }
    if (other.GiveUpTimer != 0) {
      GiveUpTimer = other.GiveUpTimer;
    }
    if (other.MaxTries != 0) {
      MaxTries = other.MaxTries;
    }
    if (other.Duration != 0) {
      Duration = other.Duration;
    }
    if (other.DurationTotalSeconds != 0) {
      DurationTotalSeconds = other.DurationTotalSeconds;
    }
    if (other.RecastTime != 0) {
      RecastTime = other.RecastTime;
    }
    if (other.RecoveryTime != 0D) {
      RecoveryTime = other.RecoveryTime;
    }
    if (other.MyCastTime != 0D) {
      MyCastTime = other.MyCastTime;
    }
    if (other.MyCastTimeInSeconds != 0D) {
      MyCastTimeInSeconds = other.MyCastTimeInSeconds;
    }
    if (other.MyRange != 0D) {
      MyRange = other.MyRange;
    }
    if (other.Mana != 0) {
      Mana = other.Mana;
    }
    if (other.MinMana != 0) {
      MinMana = other.MinMana;
    }
    if (other.MaxMana != 0) {
      MaxMana = other.MaxMana;
    }
    if (other.MinHP != 0) {
      MinHP = other.MinHP;
    }
    if (other.HealPct != 0) {
      HealPct = other.HealPct;
    }
    if (other.Debug != false) {
      Debug = other.Debug;
    }
    if (other.Reagent.Length != 0) {
      Reagent = other.Reagent;
    }
    if (other.ItemMustEquip != false) {
      ItemMustEquip = other.ItemMustEquip;
    }
    if (other.NoBurn != false) {
      NoBurn = other.NoBurn;
    }
    if (other.NoTarget != false) {
      NoTarget = other.NoTarget;
    }
    if (other.NoAggro != false) {
      NoAggro = other.NoAggro;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.EnduranceCost != 0) {
      EnduranceCost = other.EnduranceCost;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.AfterCastCompletedDelay != 0) {
      AfterCastCompletedDelay = other.AfterCastCompletedDelay;
    }
    if (other.CastID != 0) {
      CastID = other.CastID;
    }
    if (other.MinEnd != 0) {
      MinEnd = other.MinEnd;
    }
    if (other.CastInvis != false) {
      CastInvis = other.CastInvis;
    }
    if (other.SpellType.Length != 0) {
      SpellType = other.SpellType;
    }
    if (other.CastTarget.Length != 0) {
      CastTarget = other.CastTarget;
    }
    stackRequestTargets_.Add(other.stackRequestTargets_);
    if (other.StackIntervalCheck != 0L) {
      StackIntervalCheck = other.StackIntervalCheck;
    }
    if (other.StackIntervalNextCheck != 0L) {
      StackIntervalNextCheck = other.StackIntervalNextCheck;
    }
    if (other.StackRecastDelay != 0L) {
      StackRecastDelay = other.StackRecastDelay;
    }
    if (other.StackRequestItem.Length != 0) {
      StackRequestItem = other.StackRequestItem;
    }
    if (other.GiftOfMana != false) {
      GiftOfMana = other.GiftOfMana;
    }
    if (other.SpellID != 0) {
      SpellID = other.SpellID;
    }
    if (other.PctAggro != 0) {
      PctAggro = other.PctAggro;
    }
    if (other.Zone.Length != 0) {
      Zone = other.Zone;
    }
    if (other.MinSick != 0) {
      MinSick = other.MinSick;
    }
    if (other.AllowSpellSwap != false) {
      AllowSpellSwap = other.AllowSpellSwap;
    }
    if (other.NoEarlyRecast != false) {
      NoEarlyRecast = other.NoEarlyRecast;
    }
    if (other.NoStack != false) {
      NoStack = other.NoStack;
    }
    if (other.TriggerSpell.Length != 0) {
      TriggerSpell = other.TriggerSpell;
    }
    if (other.BeforeSpell.Length != 0) {
      BeforeSpell = other.BeforeSpell;
    }
    if (other.NoInterrupt != false) {
      NoInterrupt = other.NoInterrupt;
    }
    if (other.AfterEvent.Length != 0) {
      AfterEvent = other.AfterEvent;
    }
    if (other.BeforeEvent.Length != 0) {
      BeforeEvent = other.BeforeEvent;
    }
    if (other.CastIF.Length != 0) {
      CastIF = other.CastIF;
    }
    if (other.Ifs.Length != 0) {
      Ifs = other.Ifs;
    }
    if (other.InitName.Length != 0) {
      InitName = other.InitName;
    }
    if (other.ReagentOutOfStock != false) {
      ReagentOutOfStock = other.ReagentOutOfStock;
    }
    if (other.SpellInBook != false) {
      SpellInBook = other.SpellInBook;
    }
    if (other.SpellIcon != 0) {
      SpellIcon = other.SpellIcon;
    }
    if (other.NoMidSongCast != false) {
      NoMidSongCast = other.NoMidSongCast;
    }
    if (other.MinDurationBeforeRecast != 0L) {
      MinDurationBeforeRecast = other.MinDurationBeforeRecast;
    }
    if (other.IsShortBuff != false) {
      IsShortBuff = other.IsShortBuff;
    }
    if (other.HealthMax != 0) {
      HealthMax = other.HealthMax;
    }
    if (other.IgnoreStackRules != false) {
      IgnoreStackRules = other.IgnoreStackRules;
    }
    if (other.IsDebuff != false) {
      IsDebuff = other.IsDebuff;
    }
    if (other.IsDoT != false) {
      IsDoT = other.IsDoT;
    }
    if (other.Rotate != false) {
      Rotate = other.Rotate;
    }
    if (other.AfterSpell.Length != 0) {
      AfterSpell = other.AfterSpell;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.ResistType.Length != 0) {
      ResistType = other.ResistType;
    }
    if (other.ResistAdj != 0) {
      ResistAdj = other.ResistAdj;
    }
    if (other.CastTypeOverride != global::SpellData.Types.CastingType.Aa) {
      CastTypeOverride = other.CastTypeOverride;
    }
    checkForCollection_.Add(other.checkForCollection_);
    if (other.IfsKeys.Length != 0) {
      IfsKeys = other.IfsKeys;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
    if (other.IsBuff != false) {
      IsBuff = other.IsBuff;
    }
    if (other.MinHPTotal != 0) {
      MinHPTotal = other.MinHPTotal;
    }
    if (other.AfterEventKeys.Length != 0) {
      AfterEventKeys = other.AfterEventKeys;
    }
    if (other.BeforeEventKeys.Length != 0) {
      BeforeEventKeys = other.BeforeEventKeys;
    }
    if (other.AAID != 0) {
      AAID = other.AAID;
    }
    spellEffects_.Add(other.spellEffects_);
    if (other.AfterEventDelay != 0) {
      AfterEventDelay = other.AfterEventDelay;
    }
    if (other.BeforeEventDelay != 0) {
      BeforeEventDelay = other.BeforeEventDelay;
    }
    if (other.AfterSpellDelay != 0) {
      AfterSpellDelay = other.AfterSpellDelay;
    }
    if (other.BeforeSpellDelay != 0) {
      BeforeSpellDelay = other.BeforeSpellDelay;
    }
    if (other.AfterCastDelay != 0) {
      AfterCastDelay = other.AfterCastDelay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SpellName = input.ReadString();
          break;
        }
        case 18: {
          CastName = input.ReadString();
          break;
        }
        case 26: {
          Subcategory = input.ReadString();
          break;
        }
        case 34: {
          Category = input.ReadString();
          break;
        }
        case 40: {
          CastType = (global::SpellData.Types.CastingType) input.ReadEnum();
          break;
        }
        case 50: {
          TargetType = input.ReadString();
          break;
        }
        case 56: {
          SpellGem = input.ReadInt32();
          break;
        }
        case 64: {
          GiveUpTimer = input.ReadInt32();
          break;
        }
        case 72: {
          MaxTries = input.ReadInt32();
          break;
        }
        case 80: {
          Duration = input.ReadInt32();
          break;
        }
        case 88: {
          DurationTotalSeconds = input.ReadInt32();
          break;
        }
        case 96: {
          RecastTime = input.ReadInt32();
          break;
        }
        case 105: {
          RecoveryTime = input.ReadDouble();
          break;
        }
        case 113: {
          MyCastTime = input.ReadDouble();
          break;
        }
        case 121: {
          MyCastTimeInSeconds = input.ReadDouble();
          break;
        }
        case 129: {
          MyRange = input.ReadDouble();
          break;
        }
        case 136: {
          Mana = input.ReadInt32();
          break;
        }
        case 144: {
          MinMana = input.ReadInt32();
          break;
        }
        case 152: {
          MaxMana = input.ReadInt32();
          break;
        }
        case 160: {
          MinHP = input.ReadInt32();
          break;
        }
        case 168: {
          HealPct = input.ReadInt32();
          break;
        }
        case 176: {
          Debug = input.ReadBool();
          break;
        }
        case 186: {
          Reagent = input.ReadString();
          break;
        }
        case 192: {
          ItemMustEquip = input.ReadBool();
          break;
        }
        case 200: {
          NoBurn = input.ReadBool();
          break;
        }
        case 208: {
          NoTarget = input.ReadBool();
          break;
        }
        case 216: {
          NoAggro = input.ReadBool();
          break;
        }
        case 224: {
          Mode = input.ReadInt32();
          break;
        }
        case 232: {
          EnduranceCost = input.ReadInt32();
          break;
        }
        case 240: {
          Delay = input.ReadInt32();
          break;
        }
        case 248: {
          AfterCastCompletedDelay = input.ReadInt32();
          break;
        }
        case 256: {
          CastID = input.ReadInt32();
          break;
        }
        case 264: {
          MinEnd = input.ReadInt32();
          break;
        }
        case 272: {
          CastInvis = input.ReadBool();
          break;
        }
        case 282: {
          SpellType = input.ReadString();
          break;
        }
        case 290: {
          CastTarget = input.ReadString();
          break;
        }
        case 298: {
          stackRequestTargets_.AddEntriesFrom(input, _repeated_stackRequestTargets_codec);
          break;
        }
        case 304: {
          StackIntervalCheck = input.ReadInt64();
          break;
        }
        case 312: {
          StackIntervalNextCheck = input.ReadInt64();
          break;
        }
        case 320: {
          StackRecastDelay = input.ReadInt64();
          break;
        }
        case 330: {
          StackRequestItem = input.ReadString();
          break;
        }
        case 336: {
          GiftOfMana = input.ReadBool();
          break;
        }
        case 344: {
          SpellID = input.ReadInt32();
          break;
        }
        case 352: {
          PctAggro = input.ReadInt32();
          break;
        }
        case 362: {
          Zone = input.ReadString();
          break;
        }
        case 368: {
          MinSick = input.ReadInt32();
          break;
        }
        case 376: {
          AllowSpellSwap = input.ReadBool();
          break;
        }
        case 384: {
          NoEarlyRecast = input.ReadBool();
          break;
        }
        case 392: {
          NoStack = input.ReadBool();
          break;
        }
        case 402: {
          TriggerSpell = input.ReadString();
          break;
        }
        case 410: {
          BeforeSpell = input.ReadString();
          break;
        }
        case 424: {
          NoInterrupt = input.ReadBool();
          break;
        }
        case 434: {
          AfterEvent = input.ReadString();
          break;
        }
        case 442: {
          BeforeEvent = input.ReadString();
          break;
        }
        case 450: {
          CastIF = input.ReadString();
          break;
        }
        case 458: {
          Ifs = input.ReadString();
          break;
        }
        case 466: {
          InitName = input.ReadString();
          break;
        }
        case 472: {
          ReagentOutOfStock = input.ReadBool();
          break;
        }
        case 480: {
          SpellInBook = input.ReadBool();
          break;
        }
        case 488: {
          SpellIcon = input.ReadInt32();
          break;
        }
        case 496: {
          NoMidSongCast = input.ReadBool();
          break;
        }
        case 504: {
          MinDurationBeforeRecast = input.ReadInt64();
          break;
        }
        case 512: {
          IsShortBuff = input.ReadBool();
          break;
        }
        case 520: {
          HealthMax = input.ReadInt32();
          break;
        }
        case 528: {
          IgnoreStackRules = input.ReadBool();
          break;
        }
        case 536: {
          IsDebuff = input.ReadBool();
          break;
        }
        case 544: {
          IsDoT = input.ReadBool();
          break;
        }
        case 552: {
          Rotate = input.ReadBool();
          break;
        }
        case 562: {
          AfterSpell = input.ReadString();
          break;
        }
        case 568: {
          Level = input.ReadInt32();
          break;
        }
        case 578: {
          Description = input.ReadString();
          break;
        }
        case 586: {
          ResistType = input.ReadString();
          break;
        }
        case 592: {
          ResistAdj = input.ReadInt32();
          break;
        }
        case 600: {
          CastTypeOverride = (global::SpellData.Types.CastingType) input.ReadEnum();
          break;
        }
        case 610: {
          checkForCollection_.AddEntriesFrom(input, _repeated_checkForCollection_codec);
          break;
        }
        case 618: {
          IfsKeys = input.ReadString();
          break;
        }
        case 624: {
          Enabled = input.ReadBool();
          break;
        }
        case 632: {
          IsBuff = input.ReadBool();
          break;
        }
        case 640: {
          MinHPTotal = input.ReadInt32();
          break;
        }
        case 650: {
          AfterEventKeys = input.ReadString();
          break;
        }
        case 658: {
          BeforeEventKeys = input.ReadString();
          break;
        }
        case 664: {
          AAID = input.ReadInt32();
          break;
        }
        case 674: {
          spellEffects_.AddEntriesFrom(input, _repeated_spellEffects_codec);
          break;
        }
        case 680: {
          AfterEventDelay = input.ReadInt32();
          break;
        }
        case 688: {
          BeforeEventDelay = input.ReadInt32();
          break;
        }
        case 696: {
          AfterSpellDelay = input.ReadInt32();
          break;
        }
        case 704: {
          BeforeSpellDelay = input.ReadInt32();
          break;
        }
        case 712: {
          AfterCastDelay = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          SpellName = input.ReadString();
          break;
        }
        case 18: {
          CastName = input.ReadString();
          break;
        }
        case 26: {
          Subcategory = input.ReadString();
          break;
        }
        case 34: {
          Category = input.ReadString();
          break;
        }
        case 40: {
          CastType = (global::SpellData.Types.CastingType) input.ReadEnum();
          break;
        }
        case 50: {
          TargetType = input.ReadString();
          break;
        }
        case 56: {
          SpellGem = input.ReadInt32();
          break;
        }
        case 64: {
          GiveUpTimer = input.ReadInt32();
          break;
        }
        case 72: {
          MaxTries = input.ReadInt32();
          break;
        }
        case 80: {
          Duration = input.ReadInt32();
          break;
        }
        case 88: {
          DurationTotalSeconds = input.ReadInt32();
          break;
        }
        case 96: {
          RecastTime = input.ReadInt32();
          break;
        }
        case 105: {
          RecoveryTime = input.ReadDouble();
          break;
        }
        case 113: {
          MyCastTime = input.ReadDouble();
          break;
        }
        case 121: {
          MyCastTimeInSeconds = input.ReadDouble();
          break;
        }
        case 129: {
          MyRange = input.ReadDouble();
          break;
        }
        case 136: {
          Mana = input.ReadInt32();
          break;
        }
        case 144: {
          MinMana = input.ReadInt32();
          break;
        }
        case 152: {
          MaxMana = input.ReadInt32();
          break;
        }
        case 160: {
          MinHP = input.ReadInt32();
          break;
        }
        case 168: {
          HealPct = input.ReadInt32();
          break;
        }
        case 176: {
          Debug = input.ReadBool();
          break;
        }
        case 186: {
          Reagent = input.ReadString();
          break;
        }
        case 192: {
          ItemMustEquip = input.ReadBool();
          break;
        }
        case 200: {
          NoBurn = input.ReadBool();
          break;
        }
        case 208: {
          NoTarget = input.ReadBool();
          break;
        }
        case 216: {
          NoAggro = input.ReadBool();
          break;
        }
        case 224: {
          Mode = input.ReadInt32();
          break;
        }
        case 232: {
          EnduranceCost = input.ReadInt32();
          break;
        }
        case 240: {
          Delay = input.ReadInt32();
          break;
        }
        case 248: {
          AfterCastCompletedDelay = input.ReadInt32();
          break;
        }
        case 256: {
          CastID = input.ReadInt32();
          break;
        }
        case 264: {
          MinEnd = input.ReadInt32();
          break;
        }
        case 272: {
          CastInvis = input.ReadBool();
          break;
        }
        case 282: {
          SpellType = input.ReadString();
          break;
        }
        case 290: {
          CastTarget = input.ReadString();
          break;
        }
        case 298: {
          stackRequestTargets_.AddEntriesFrom(ref input, _repeated_stackRequestTargets_codec);
          break;
        }
        case 304: {
          StackIntervalCheck = input.ReadInt64();
          break;
        }
        case 312: {
          StackIntervalNextCheck = input.ReadInt64();
          break;
        }
        case 320: {
          StackRecastDelay = input.ReadInt64();
          break;
        }
        case 330: {
          StackRequestItem = input.ReadString();
          break;
        }
        case 336: {
          GiftOfMana = input.ReadBool();
          break;
        }
        case 344: {
          SpellID = input.ReadInt32();
          break;
        }
        case 352: {
          PctAggro = input.ReadInt32();
          break;
        }
        case 362: {
          Zone = input.ReadString();
          break;
        }
        case 368: {
          MinSick = input.ReadInt32();
          break;
        }
        case 376: {
          AllowSpellSwap = input.ReadBool();
          break;
        }
        case 384: {
          NoEarlyRecast = input.ReadBool();
          break;
        }
        case 392: {
          NoStack = input.ReadBool();
          break;
        }
        case 402: {
          TriggerSpell = input.ReadString();
          break;
        }
        case 410: {
          BeforeSpell = input.ReadString();
          break;
        }
        case 424: {
          NoInterrupt = input.ReadBool();
          break;
        }
        case 434: {
          AfterEvent = input.ReadString();
          break;
        }
        case 442: {
          BeforeEvent = input.ReadString();
          break;
        }
        case 450: {
          CastIF = input.ReadString();
          break;
        }
        case 458: {
          Ifs = input.ReadString();
          break;
        }
        case 466: {
          InitName = input.ReadString();
          break;
        }
        case 472: {
          ReagentOutOfStock = input.ReadBool();
          break;
        }
        case 480: {
          SpellInBook = input.ReadBool();
          break;
        }
        case 488: {
          SpellIcon = input.ReadInt32();
          break;
        }
        case 496: {
          NoMidSongCast = input.ReadBool();
          break;
        }
        case 504: {
          MinDurationBeforeRecast = input.ReadInt64();
          break;
        }
        case 512: {
          IsShortBuff = input.ReadBool();
          break;
        }
        case 520: {
          HealthMax = input.ReadInt32();
          break;
        }
        case 528: {
          IgnoreStackRules = input.ReadBool();
          break;
        }
        case 536: {
          IsDebuff = input.ReadBool();
          break;
        }
        case 544: {
          IsDoT = input.ReadBool();
          break;
        }
        case 552: {
          Rotate = input.ReadBool();
          break;
        }
        case 562: {
          AfterSpell = input.ReadString();
          break;
        }
        case 568: {
          Level = input.ReadInt32();
          break;
        }
        case 578: {
          Description = input.ReadString();
          break;
        }
        case 586: {
          ResistType = input.ReadString();
          break;
        }
        case 592: {
          ResistAdj = input.ReadInt32();
          break;
        }
        case 600: {
          CastTypeOverride = (global::SpellData.Types.CastingType) input.ReadEnum();
          break;
        }
        case 610: {
          checkForCollection_.AddEntriesFrom(ref input, _repeated_checkForCollection_codec);
          break;
        }
        case 618: {
          IfsKeys = input.ReadString();
          break;
        }
        case 624: {
          Enabled = input.ReadBool();
          break;
        }
        case 632: {
          IsBuff = input.ReadBool();
          break;
        }
        case 640: {
          MinHPTotal = input.ReadInt32();
          break;
        }
        case 650: {
          AfterEventKeys = input.ReadString();
          break;
        }
        case 658: {
          BeforeEventKeys = input.ReadString();
          break;
        }
        case 664: {
          AAID = input.ReadInt32();
          break;
        }
        case 674: {
          spellEffects_.AddEntriesFrom(ref input, _repeated_spellEffects_codec);
          break;
        }
        case 680: {
          AfterEventDelay = input.ReadInt32();
          break;
        }
        case 688: {
          BeforeEventDelay = input.ReadInt32();
          break;
        }
        case 696: {
          AfterSpellDelay = input.ReadInt32();
          break;
        }
        case 704: {
          BeforeSpellDelay = input.ReadInt32();
          break;
        }
        case 712: {
          AfterCastDelay = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the SpellData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum CastingType {
      [pbr::OriginalName("AA")] Aa = 0,
      [pbr::OriginalName("Spell")] Spell = 1,
      [pbr::OriginalName("Disc")] Disc = 2,
      [pbr::OriginalName("Ability")] Ability = 3,
      [pbr::OriginalName("Item")] Item = 4,
      [pbr::OriginalName("None")] None = 5,
    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
